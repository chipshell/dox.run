#! /usr/bin/env bash

: "${__appdir:=.}"
: "${__datadir:=.}"


__puton__ () {
  if [ ! -e $__appdir/Dockerfile ]; then
    echo [ERROR]: no Dockerfile found under $__appdir
    return 1
  fi
  __appdir=$(realpath $__appdir)
}

name__ () {
  basename $__appdir
}

image__ () {
  echo $(name__)'-image'
}

info__ () {
  echo Project: $(name__)
  echo appdir: $__appdir
  echo datadir: $__datadir
  echo '@see status command'
}

status__ () {
  # Store the image name in a variable
  image_name=$(image__)

  # Print image details
  echo "Image Details:"
  docker image inspect $image_name

  # Find containers that are using the image
  echo "Containers using the image:"
  docker container ls --all --filter ancestor=$image_name

  # Check if the image exists in the local Docker image repository
  if docker image inspect $image_name > /dev/null 2>&1; then
      echo "The image exists in the local Docker image repository."
  else
      echo "The image does not exist in the local Docker image repository."
  fi

  # Check if the image is being used by any running containers
  if [ $(docker ps -a -q --no-trunc --filter ancestor=$image_name | wc -l) -gt 0 ]; then
      echo "The image is being used by running containers."
  else
      echo "The image is not being used by any running containers."
  fi
}

build__ () {
  docker build -t $(image__) $__appdir
}

bash__ () {
  docker exec -it $(image__) bash
}

run__ () {
  docker run -it --rm \
    -v $__appdir:/app \
    -v $__datadir:/data \
    $(image__) $@
}

kill__help='@arg docker name @does kill all instances of a name'
kill__ () {
  local image=$(image__)
  docker rm -f $(docker ps -a -q --filter ancestor=$image) || echo 'nothing left to kill.' && return 0
}

. undies

