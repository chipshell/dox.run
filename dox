#! /usr/bin/env bash

: "${__appdir:=.}"
: "${__datadir:=.}"


declare -A dox_volumes
declare -A dox_ports

__puton__ () {
  __appdir=$(realpath $__appdir)
  __datadir=$(realpath $__datadir)
  if [ -f $__appdir/Doxfile ]; then
    source $__appdir/Doxfile
  fi
}

__valid () {
  local appdir=${1:-$__appdir}
  if [ ! -e $appdir/Dockerfile ]; then
    echo [ERROR]: no Dockerfile found under $appdir
    return 1
  fi
}

for__ () {
  local appdir=$1
  shift
  __valid $appdir || return
  __appdir=$(realpath $appdir)
  __run $@
}

name__ () {
  __valid || return
  basename $__appdir
}

image__ () {
  __valid || return
  echo $(name__)'-image'
}

info__ () {
  __valid || return
  echo Project: $(name__)
  echo appdir: $__appdir
  echo datadir: $__datadir
  echo '@see status command'
}

status__ () {
  __valid || return
  # Store the image name in a variable
  image_name=$(image__)

  # Print image details
  echo "Image Details:"
  docker image inspect $image_name

  # Find containers that are using the image
  echo "Containers using the image:"
  docker container ls --all --filter ancestor=$image_name

  # Check if the image exists in the local Docker image repository
  if docker image inspect $image_name > /dev/null 2>&1; then
      echo "The image exists in the local Docker image repository."
  else
      echo "The image does not exist in the local Docker image repository."
  fi

  # Check if the image is being used by any running containers
  if [ $(docker ps -a -q --no-trunc --filter ancestor=$image_name | wc -l) -gt 0 ]; then
      echo "The image is being used by running containers."
  else
      echo "The image is not being used by any running containers."
  fi
}

build__ () {
  __valid || return
  docker build -t $(image__) $__appdir
}

bash__ () {
  __valid || return
  docker exec -it $(image__) bash
}

# return false unless --dox is present as an argument, in which case ignor prior args
#  and run dox with remaining args
__check_for_reset () {
  while [ ${@:(( i )):1} ]; do
    if [ ${@:(( i++ )):1} = '--dox' ]; then
      __run ${@:$i}
      return 0
    fi
  done
  return 1
}

run__ () {
  __valid || return

  # if --dox is present, reset all args prior
  __check_for_reset $@ && return

  dox_volumes[$__appdir]='/app'
  dox_volumes[$__datadir]='/data'

  volume_options=()
  for source in "${!dox_volumes[@]}"; do
    destination=${dox_volumes[$source]}
    volume_options+=("-v" "$source:$destination")
  done

  port_options=()
  for source in "${!dox_ports[@]}"; do
    destination=${dox_ports[$source]}
    port_options+=("-p" "$source:$destination")
  done

  docker run -it --rm \
    "${volume_options[@]}" \
    "${port_options[@]}" \
    $(image__) $@
}

kill__help='@arg docker name @does kill all instances of a name'
kill__ () {
  __valid || return
  local image=$(image__)
  docker rm -f $(docker ps -a -q --filter ancestor=$image) || echo 'nothing left to kill.' && return 0
}

. undies

